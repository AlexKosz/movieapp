{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","Main","useState","page","setPage","apiUrl","searchApiPath","popUrl","upcomingUrl","nowUrl","topUrl","formInfo","setFormInfo","active","setActive","pop","setPop","now","setNow","top","setTop","upcoming","setUpcoming","movie","title","overview","poster_path","vote_average","backdrop_path","movies","setMovies","getMovies","url","axios","get","then","res","APImovies","data","results","console","log","catch","err","refresh","useEffect","generic","activeClass","className","id","onSubmit","e","preventDefault","searchTerm","type","placeholder","onChange","target","value","class","onClick","prevPage","map","src","alt","voteNum","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4b1a81f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction getClassByRate(voteNum) {\r\n    if (voteNum >= 8) {\r\n        return \"green\";\r\n    } else if (voteNum >= 5) {\r\n        return \"orange\";\r\n    } else {\r\n        return \"red\";\r\n    }\r\n}\r\n\r\n\r\nlet API_KEY = \"a3f41888f2daaab89f43deec96a8bcfa\";\r\n\r\n// const ApiUrl = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${api-key}&page=1\";\r\n\r\n\r\nconst Main = () => {\r\n    const [page, setPage] = useState(1)\r\n    const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`;\r\n    const imagePath = \"https://image.tmdb.org/t/p/w1280\";\r\n    const searchApiPath = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=\"`;\r\n    const popUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`;\r\n    const upcomingUrl = `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}&language=en-US&page=${page}`;\r\n    const nowUrl = `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}&language=en-US&page=${page}`;\r\n    const topUrl = `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US&page=${page}`;\r\n\r\n    const [formInfo, setFormInfo] = useState(\"\")\r\n    const [active, setActive] = useState(\"pop\")\r\n\r\n    const [pop, setPop] = useState(\"btn first active\")\r\n    const [now, setNow] = useState(\"btn first\")\r\n    const [top, setTop] = useState(\"btn first\")\r\n    const [upcoming, setUpcoming] = useState(\"btn first\")\r\n\r\n    let movie = {\r\n        title: \"\",\r\n        overview: \"\",\r\n        poster_path: \"\",\r\n        vote_average: \"\",\r\n        backdrop_path: \"\"\r\n    }\r\n\r\n    const [movies, setMovies] = useState([movie, movie]);\r\n\r\n    const getMovies = (url) => {\r\n        axios.get(url)\r\n            .then(res => {\r\n                let APImovies = res.data.results;\r\n                setMovies(APImovies)\r\n                console.log(url)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const nextPage = () => {\r\n        let target = page + 1\r\n        setPage(target)\r\n    }\r\n\r\n    const prevPage = () => {\r\n        let target = page - 1\r\n        if (target >= 1) {\r\n            setPage(target)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const refresh = () => {\r\n        switch (active) {\r\n            case 'pop':\r\n                getMovies(popUrl)\r\n                break;\r\n            case 'now':\r\n                getMovies(nowUrl)\r\n                break;\r\n            case 'top':\r\n                getMovies(topUrl)\r\n                break;\r\n            case 'upcoming':\r\n                getMovies(upcomingUrl)\r\n                break;\r\n            default:\r\n                console.log(\"nah\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refresh()\r\n    }, [page])\r\n\r\n    useEffect(() => {\r\n        getMovies(apiUrl)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let generic = \"btn first inactive\"\r\n        let activeClass = \"btn first active\"\r\n\r\n        switch (active) {\r\n            case 'pop':\r\n                setPop(activeClass)\r\n                setNow(generic)\r\n                setTop(generic)\r\n                setUpcoming(generic)\r\n                refresh()\r\n                break;\r\n            case 'now':\r\n                setPop(generic)\r\n                setNow(activeClass)\r\n                setTop(generic)\r\n                refresh()\r\n                break;\r\n            case 'top':\r\n                setPop(generic)\r\n                setNow(generic)\r\n                setTop(activeClass)\r\n                setUpcoming(generic)\r\n                refresh()\r\n                break;\r\n            case 'upcoming':\r\n                setPop(generic)\r\n                setNow(generic)\r\n                setTop(generic)\r\n                setUpcoming(activeClass)\r\n                refresh()\r\n                break;\r\n            default:\r\n                console.log(\"nah\")\r\n        }\r\n        setPage(1)\r\n    }, [active])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const changehandler = (e) => {\r\n\r\n        setFormInfo(e.target.value)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        let searchTerm = `${formInfo}\"`;\r\n        if (searchTerm !== \"\") {\r\n            getMovies(searchApiPath + searchTerm);\r\n        }\r\n        setFormInfo(\"\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"headd\">\r\n                <div className=\"container headd-wrapper\">\r\n                    <h1 className=\"logo\">Mov(i)e it!</h1>\r\n                    <form id=\"form\" onSubmit={submitHandler}>\r\n                        <input type=\"text\" id=\"search\" className=\"search\" placeholder=\"Search\" onChange={changehandler} />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"container\">\r\n                <section class=\"movie-filter\">\r\n                    <button type=\"button\" title=\"popular\" className={pop} onClick={() => setActive(\"pop\")}>\r\n                        Popular\r\n                    </button>\r\n                    <button type=\"button\" title=\"now-playing\" className={now} onClick={() => setActive(\"now\")}>\r\n                        Now Playing\r\n                    </button>\r\n                    <button type=\"button\" title=\"top-rated\" className={top} onClick={() => setActive(\"top\")}>\r\n                        Top Rated\r\n                    </button>\r\n                    <button type=\"button\" title=\"upcoming\" className={upcoming} onClick={() => setActive(\"upcoming\")}>\r\n                        Upcoming\r\n                    </button>\r\n                </section>\r\n                <section class=\"movie-filter\">\r\n                    <button type=\"button\" title=\"upcoming\" className=\"btn first inactive\" onClick={() => prevPage()}>\r\n                        Previous Page\r\n                    </button>\r\n                    <button type=\"button\" title=\"top-rated\" className=\"btn first inactive\" onClick={() => nextPage()}>\r\n                        Next Page\r\n                    </button>\r\n                </section>\r\n                <div id=\"main\">\r\n                    {movies.map((movie) =>\r\n                        <div className=\"movie\">\r\n                            <img src={`${imagePath + movie.poster_path}`} alt={movie.title} />\r\n                            <div class='movie-info'>\r\n                                <h3>{movie.title}</h3>\r\n                                <span class={getClassByRate(movie.vote_average)}>{movie.vote_average}</span>\r\n                            </div>\r\n                            <div class='overview'>\r\n                                <h3>Overview</h3>\r\n                                <p>{movie.overview}</p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Main;","import './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}